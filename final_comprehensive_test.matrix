let pi_test = pi
let pi_result = println("PI Test")
let pi_value = println(pi_test)

let e_test = e
let e_result = println("E Test")
let e_value = println(e_test)

let tau_test = tau
let tau_result = println("TAU Test")
let tau_value = println(tau_test)

let abs_test = abs(-5.5)
let abs_result = println("ABS Test: abs(-5.5)")
let abs_value = println(abs_test)

let sqrt_test = sqrt(16.0)
let sqrt_result = println("SQRT Test: sqrt(16.0)")
let sqrt_value = println(sqrt_test)

let sin_test_val = sin(0.0)
let sin_result = println("SIN Test: sin(0.0)")
let sin_value = println(sin_test_val)

let cos_test_val = cos(0.0)
let cos_result = println("COS Test: cos(0.0)")
let cos_value = println(cos_test_val)

let tan_test_val = tan(0.0)
let tan_result = println("TAN Test: tan(0.0)")
let tan_value = println(tan_test_val)

let exp_test_val = exp(1.0)
let exp_result = println("EXP Test: exp(1.0)")
let exp_value = println(exp_test_val)

let log_test_val = log(2.718281828459045)
let log_result = println("LOG Test: log(e)")
let log_value = println(log_test_val)

let pow_test_val = pow(2.0, 3.0)
let pow_result = println("POW Test: pow(2.0, 3.0)")
let pow_value = println(pow_test_val)

let floor_test_val = floor(3.7)
let floor_result = println("FLOOR Test: floor(3.7)")
let floor_value = println(floor_test_val)

let ceil_test_val = ceil(3.2)
let ceil_result = println("CEIL Test: ceil(3.2)")
let ceil_value = println(ceil_test_val)

let round_test_val = round(3.6)
let round_result = println("ROUND Test: round(3.6)")
let round_value = println(round_test_val)

let max_test_val = max(5.0, 3.0)
let max_result = println("MAX Test: max(5.0, 3.0)")
let max_value = println(max_test_val)

let min_test_val = min(5.0, 3.0)
let min_result = println("MIN Test: min(5.0, 3.0)")
let min_value = println(min_test_val)

let physics_separator = println("=== PHYSICS TESTS ===")

let world = create_physics_world()
let world_result = println("Physics World Test: create_physics_world()")
let world_value = println(world)

let sphere_pos = [0.0, 5.0, 0.0]
let sphere = add_rigid_body(world, "sphere", 1.0, sphere_pos)
let sphere_result = println("Add Sphere Test: add_rigid_body(...)")
let sphere_value = println(sphere)

let box_pos = [2.0, 3.0, 0.0]
let box = add_rigid_body(world, "box", 2.0, box_pos)
let box_result = println("Add Box Test: add_rigid_body(...)")
let box_value = println(box)

let step_result = physics_step(world)
let step_test = println("Physics Step Test: physics_step(...)")

let sphere_position = get_object_position(world, sphere)
let pos_test = println("Get Position Test: get_object_position(...)")

let sphere_mass = get_object_mass(world, sphere)
let mass_result = println("Get Mass Test: get_object_mass(...)")
let mass_value = println(sphere_mass)

let mass_set = set_object_mass(world, sphere, 1.5)
let new_mass = get_object_mass(world, sphere)
let new_mass_result = println("Set Mass Test: Updated mass")
let new_mass_value = println(new_mass)

let sphere_shape = get_object_shape(world, sphere)
let shape_result = println("Get Shape Test: get_object_shape(...)")
let shape_value = println(sphere_shape)

let objects = list_objects(world)
let objects_test = println("List Objects Test: list_objects(...)")
let objects_len = len(objects)
let objects_count = println(objects_len)

let quantum_separator = println("=== QUANTUM TESTS ===")

let circuit = quantum_circuit(3)
let circuit_result = println("Quantum Circuit Test: quantum_circuit(3)")
let circuit_value = println(circuit)

let h_gate = h(circuit, 0)
let h_test = println("Hadamard Gate Test: h(circuit, 0)")

let x_gate = x(circuit, 1)
let x_test = println("Pauli-X Gate Test: x(circuit, 1)")

let y_gate = y(circuit, 2)
let y_test = println("Pauli-Y Gate Test: y(circuit, 2)")

let z_gate = z(circuit, 0)
let z_test = println("Pauli-Z Gate Test: z(circuit, 0)")

let t_gate = t(circuit, 1)
let t_test = println("T Gate Test: t(circuit, 1)")

let s_gate = s(circuit, 2)
let s_test = println("S Gate Test: s(circuit, 2)")

let rx_gate = rx(circuit, 0, 1.5708)
let rx_test = println("RX Gate Test: rx(circuit, 0, 1.5708)")

let ry_gate = ry(circuit, 1, 3.14159)
let ry_test = println("RY Gate Test: ry(circuit, 1, 3.14159)")

let rz_gate = rz(circuit, 2, 0.7854)
let rz_test = println("RZ Gate Test: rz(circuit, 2, 0.7854)")

let cnot_gate = cnot(circuit, 0, 1)
let cnot_test = println("CNOT Gate Test: cnot(circuit, 0, 1)")

let cz_gate = cz(circuit, 1, 2)
let cz_test = println("CZ Gate Test: cz(circuit, 1, 2)")

let swap_gate = swap(circuit, 0, 2)
let swap_test = println("SWAP Gate Test: swap(circuit, 0, 2)")

let circuit2 = quantum_circuit(3)
let toffoli_gate = toffoli(circuit2, 0, 1, 2)
let toffoli_test = println("Toffoli Gate Test: toffoli(circuit2, 0, 1, 2)")

let measure_gate = measure(circuit, 0)
let measure_test = println("Measure Test: measure(circuit, 0)")

let measure_all_gate = measure_all(circuit2)
let measure_all_test = println("Measure All Test: measure_all(circuit2)")

let simulation = simulate_circuit(circuit)
let sim_test = println("Simulate Circuit Test: simulate_circuit(circuit)")
let sim_value = println(simulation)

let probabilities = get_probabilities(circuit)
let prob_test = println("Get Probabilities Test: get_probabilities(circuit)")
let prob_count = len(probabilities)
let prob_len = println(prob_count)

let circuit_info_result = circuit_info(circuit)
let info_test = println("Circuit Info Test: circuit_info(circuit)")
let info_value = println(circuit_info_result)

let bell = bell_state()
let bell_test = println("Bell State Test: bell_state()")
let bell_value = println(bell)

let state_print = print_state(simulation)
let state_test = println("Print State Test: print_state(simulation)")

let string_separator = println("=== STRING AND UTILITY TESTS ===")

let str_test = str(42)
let str_result = println("STR Test: str(42)")
let str_value = println(str_test)

let test_array = [1, 2, 3, 4, 5]
let len_test = len(test_array)
let len_result = println("LEN Test: len([1, 2, 3, 4, 5])")
let len_value = println(len_test)

let test_string = "Hello"
let str_len_test = len(test_string)
let str_len_result = println("String LEN Test: len(\"Hello\")")
let str_len_value = println(str_len_test)

let summary_separator = println("=== TEST SUMMARY ===")
let total_tests = println("Comprehensive Matrix Language Test Suite Completed!")
let features_tested = println("âœ“ Mathematical constants (pi, e, tau)")
let math_tested = println("âœ“ Mathematical functions (abs, sqrt, sin, cos, tan, exp, log, pow, floor, ceil, round, max, min)")
let physics_tested = println("âœ“ Physics simulation (world creation, objects, simulation, queries)")
let quantum_tested = println("âœ“ Quantum computing (circuits, gates, simulation, measurement)")
let string_tested = println("âœ“ String and utility functions (str, len, print, println)")
let all_passed = println("ðŸŽ‰ ALL MATRIX LANGUAGE FEATURES TESTED SUCCESSFULLY!")
