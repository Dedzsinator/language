let start_msg = println("=== MATRIX LANGUAGE COMPREHENSIVE TEST ===")

let pi_test = println(pi)
let e_test = println(e)
let tau_test = println(tau)

let abs_test = println(abs(-5.5))
let sqrt_test = println(sqrt(16.0))
let sin_test = println(sin(0.0))
let cos_test = println(cos(0.0))
let tan_test = println(tan(0.0))
let exp_test = println(exp(1.0))
let log_test = println(log(2.718281828459045))
let pow_test = println(pow(2.0, 3.0))
let floor_test = println(floor(3.7))
let ceil_test = println(ceil(3.2))
let round_test = println(round(3.6))
let max_test = println(max(5.0, 3.0))
let min_test = println(min(5.0, 3.0))

let physics_header = println("=== PHYSICS TESTS ===")

let world = create_physics_world()
let world_print = println(world)

let sphere_pos = [0.0, 5.0, 0.0]
let sphere = add_rigid_body(world, "sphere", 1.0, sphere_pos)
let sphere_print = println(sphere)

let box_pos = [2.0, 3.0, 0.0]
let box = add_rigid_body(world, "box", 2.0, box_pos)
let box_print = println(box)

let step_result = physics_step(world)

let sphere_position = get_object_position(world, sphere)

let sphere_mass = get_object_mass(world, sphere)
let mass_print = println(sphere_mass)

let mass_update = set_object_mass(world, sphere, 1.5)
let new_mass = get_object_mass(world, sphere)
let new_mass_print = println(new_mass)

let sphere_shape = get_object_shape(world, sphere)
let shape_print = println(sphere_shape)

let objects = list_objects(world)
let objects_count = len(objects)
let count_print = println(objects_count)

let quantum_header = println("=== QUANTUM TESTS ===")

let circuit = quantum_circuit(3)
let circuit_print = println(circuit)

let h_gate = h(circuit, 0)
let x_gate = x(circuit, 1)
let y_gate = y(circuit, 2)
let z_gate = z(circuit, 0)
let t_gate = t(circuit, 1)
let s_gate = s(circuit, 2)

let rx_gate = rx(circuit, 0, 1.5708)
let ry_gate = ry(circuit, 1, 3.14159)
let rz_gate = rz(circuit, 2, 0.7854)

let cnot_gate = cnot(circuit, 0, 1)
let cz_gate = cz(circuit, 1, 2)
let swap_gate = swap(circuit, 0, 2)

let circuit2 = quantum_circuit(3)
let toffoli_gate = toffoli(circuit2, 0, 1, 2)

let measure_gate = measure(circuit, 0)
let measure_all_gate = measure_all(circuit2)

let simulation = simulate_circuit(circuit)
let sim_print = println(simulation)

let probabilities = get_probabilities(circuit)
let prob_count = len(probabilities)
let prob_print = println(prob_count)

let circuit_info_result = circuit_info(circuit)
let info_print = println(circuit_info_result)

let bell = bell_state()
let bell_print = println(bell)

let state_print = print_state(simulation)

let utility_header = println("=== UTILITY TESTS ===")

let str_test = str(42)
let str_print = println(str_test)

let test_array = [1, 2, 3, 4, 5]
let array_len = len(test_array)
let len_print = println(array_len)

let test_string = "Hello"
let string_len = len(test_string)
let str_len_print = println(string_len)

let success_msg = println("ðŸŽ‰ ALL MATRIX LANGUAGE FEATURES TESTED SUCCESSFULLY!")
