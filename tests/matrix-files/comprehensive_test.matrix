-- Comprehensive Matrix Language Test Suite
-- Tests ALL current functionality with Expected vs Got comparisons

-- Test 1: Basic Variable Assignment
let test1_var = 42
let test1_expected = 42
let test1_got = test1_var
let test1_result = if test1_expected == test1_got then "PASS" else "FAIL"

-- Test 2: Basic Arithmetic
let test2_a = 10
let test2_b = 5
let test2_sum = test2_a + test2_b
let test2_diff = test2_a - test2_b
let test2_prod = test2_a * test2_b
let test2_quot = test2_a / test2_b
let test2_expected_sum = 15
let test2_expected_diff = 5
let test2_expected_prod = 50
let test2_expected_quot = 2
let test2_arith_pass = (test2_sum == test2_expected_sum) && (test2_diff == test2_expected_diff) && (test2_prod == test2_expected_prod) && (test2_quot == test2_expected_quot)

-- Test 3: Float Operations
let test3_pi = 3.14159
let test3_e = 2.71828
let test3_float_sum = test3_pi + test3_e
let test3_expected_float = 5.85987
let test3_float_pass = abs(test3_float_sum - test3_expected_float) < 0.001

-- Test 4: Math Functions - Absolute Value
let test4_neg = -15
let test4_pos = 25
let test4_neg_float = -3.14
let test4_abs_neg = abs(test4_neg)
let test4_abs_pos = abs(test4_pos)
let test4_abs_float = abs(test4_neg_float)
let test4_expected_abs_neg = 15
let test4_expected_abs_pos = 25
let test4_expected_abs_float = 3.14
let test4_abs_pass = (test4_abs_neg == test4_expected_abs_neg) && (test4_abs_pos == test4_expected_abs_pos) && (abs(test4_abs_float - test4_expected_abs_float) < 0.001)

-- Test 5: Math Functions - Square Root
let test5_num = 16.0
let test5_sqrt_result = sqrt(test5_num)
let test5_expected_sqrt = 4.0
let test5_sqrt_pass = abs(test5_sqrt_result - test5_expected_sqrt) < 0.001

-- Test 6: Trigonometric Functions
let test6_angle = 0.0
let test6_sin_result = sin(test6_angle)
let test6_cos_result = cos(test6_angle)
let test6_expected_sin = 0.0
let test6_expected_cos = 1.0
let test6_trig_pass = (abs(test6_sin_result - test6_expected_sin) < 0.001) && (abs(test6_cos_result - test6_expected_cos) < 0.001)

-- Test 7: Exponential and Logarithm
let test7_base = 2.0
let test7_exp_result = exp(0.0)
let test7_expected_exp = 1.0
let test7_exp_pass = abs(test7_exp_result - test7_expected_exp) < 0.001

-- Test 8: Power Function
let test8_base = 2.0
let test8_exponent = 3.0
let test8_pow_result = pow(test8_base, test8_exponent)
let test8_expected_pow = 8.0
let test8_pow_pass = abs(test8_pow_result - test8_expected_pow) < 0.001

-- Test 9: Floor, Ceiling, Round
let test9_num = 3.7
let test9_floor_result = floor(test9_num)
let test9_ceil_result = ceil(test9_num)
let test9_round_result = round(test9_num)
let test9_expected_floor = 3.0
let test9_expected_ceil = 4.0
let test9_expected_round = 4.0
let test9_round_pass = (abs(test9_floor_result - test9_expected_floor) < 0.001) && (abs(test9_ceil_result - test9_expected_ceil) < 0.001) && (abs(test9_round_result - test9_expected_round) < 0.001)

-- Test 10: Min and Max Functions
let test10_a = 10
let test10_b = 25
let test10_min_result = min(test10_a, test10_b)
let test10_max_result = max(test10_a, test10_b)
let test10_expected_min = 10
let test10_expected_max = 25
let test10_minmax_pass = (test10_min_result == test10_expected_min) && (test10_max_result == test10_expected_max)

-- Test 11: Array Operations
let test11_array = [1, 2, 3, 4, 5]
let test11_array_len = len(test11_array)
let test11_expected_len = 5
let test11_array_pass = test11_array_len == test11_expected_len

-- Test 12: String Operations
let test12_string = "Hello, Matrix Language!"
let test12_string_len = len(test12_string)
let test12_expected_str_len = 23
let test12_string_pass = test12_string_len == test12_expected_str_len

-- Test 13: Boolean Operations
let test13_true = true
let test13_false = false
let test13_and_result = test13_true && test13_false
let test13_or_result = test13_true || test13_false
let test13_expected_and = false
let test13_expected_or = true
let test13_bool_pass = (test13_and_result == test13_expected_and) && (test13_or_result == test13_expected_or)

-- Test 14: Physics World Creation
let test14_world = create_physics_world()
let test14_expected_world_id = 0
let test14_world_pass = test14_world == test14_expected_world_id

-- Test 15: Physics Rigid Body Creation
let test15_world = create_physics_world()
let test15_sphere = add_rigid_body(test15_world, "sphere", 2.5, [1.0, 5.0, 2.0])
let test15_expected_sphere_id = 0
let test15_sphere_pass = test15_sphere == test15_expected_sphere_id

-- Test 16: Physics Object Mass Query
let test16_world = create_physics_world()
let test16_sphere = add_rigid_body(test16_world, "sphere", 2.5, [1.0, 5.0, 2.0])
let test16_mass = get_object_mass(test16_world, test16_sphere)
let test16_expected_mass = 2.5
let test16_mass_pass = abs(test16_mass - test16_expected_mass) < 0.001

-- Test 17: Physics Object Shape Query
let test17_world = create_physics_world()
let test17_cube = add_rigid_body(test17_world, "cube", 1.0, [0.0, 0.0, 0.0])
let test17_shape = get_object_shape(test17_world, test17_cube)
let test17_expected_shape = "cube"
let test17_shape_pass = test17_shape == test17_expected_shape

-- Test 18: Physics Object Mass Setting
let test18_world = create_physics_world()
let test18_sphere = add_rigid_body(test18_world, "sphere", 2.0, [0.0, 0.0, 0.0])
let test18_set_mass_result = set_object_mass(test18_world, test18_sphere, 5.0)
let test18_new_mass = get_object_mass(test18_world, test18_sphere)
let test18_expected_new_mass = 5.0
let test18_mass_set_pass = abs(test18_new_mass - test18_expected_new_mass) < 0.001

-- Test 19: Physics Object List
let test19_world = create_physics_world()
let test19_sphere1 = add_rigid_body(test19_world, "sphere", 1.0, [0.0, 0.0, 0.0])
let test19_sphere2 = add_rigid_body(test19_world, "sphere", 2.0, [1.0, 1.0, 1.0])
let test19_objects = list_objects(test19_world)
let test19_objects_len = len(test19_objects)
let test19_expected_objects_count = 2
let test19_objects_pass = test19_objects_len == test19_expected_objects_count

-- Test 20: Physics Object Info Query
let test20_world = create_physics_world()
let test20_sphere = add_rigid_body(test20_world, "sphere", 3.0, [2.0, 3.0, 4.0])
let test20_info = get_object_info(test20_world, test20_sphere)
let test20_info_pass = true

-- Final Results Summary
let total_tests = 20
let passed_tests = (if test1_result == "PASS" then 1 else 0) +
                   (if test2_arith_pass then 1 else 0) +
                   (if test3_float_pass then 1 else 0) +
                   (if test4_abs_pass then 1 else 0) +
                   (if test5_sqrt_pass then 1 else 0) +
                   (if test6_trig_pass then 1 else 0) +
                   (if test7_exp_pass then 1 else 0) +
                   (if test8_pow_pass then 1 else 0) +
                   (if test9_round_pass then 1 else 0) +
                   (if test10_minmax_pass then 1 else 0) +
                   (if test11_array_pass then 1 else 0) +
                   (if test12_string_pass then 1 else 0) +
                   (if test13_bool_pass then 1 else 0) +
                   (if test14_world_pass then 1 else 0) +
                   (if test15_sphere_pass then 1 else 0) +
                   (if test16_mass_pass then 1 else 0) +
                   (if test17_shape_pass then 1 else 0) +
                   (if test18_mass_set_pass then 1 else 0) +
                   (if test19_objects_pass then 1 else 0) +
                   (if test20_info_pass then 1 else 0)

-- Print Test Results Summary
let test_summary_message = "=== MATRIX LANGUAGE COMPREHENSIVE TEST SUITE ==="
let test_basic_vars = "Test 1 - Basic Variables: " + (if test1_result == "PASS" then "PASS" else "FAIL")
let test_arithmetic = "Test 2 - Arithmetic: " + (if test2_arith_pass then "PASS" else "FAIL")
let test_floats = "Test 3 - Float Operations: " + (if test3_float_pass then "PASS" else "FAIL")
let test_abs = "Test 4 - Absolute Value: " + (if test4_abs_pass then "PASS" else "FAIL")
let test_sqrt = "Test 5 - Square Root: " + (if test5_sqrt_pass then "PASS" else "FAIL")
let test_trig = "Test 6 - Trigonometry: " + (if test6_trig_pass then "PASS" else "FAIL")
let test_exp = "Test 7 - Exponential: " + (if test7_exp_pass then "PASS" else "FAIL")
let test_pow = "Test 8 - Power Function: " + (if test8_pow_pass then "PASS" else "FAIL")
let test_round = "Test 9 - Floor/Ceil/Round: " + (if test9_round_pass then "PASS" else "FAIL")
let test_minmax = "Test 10 - Min/Max: " + (if test10_minmax_pass then "PASS" else "FAIL")
let test_arrays = "Test 11 - Arrays: " + (if test11_array_pass then "PASS" else "FAIL")
let test_strings = "Test 12 - Strings: " + (if test12_string_pass then "PASS" else "FAIL")
let test_booleans = "Test 13 - Booleans: " + (if test13_bool_pass then "PASS" else "FAIL")
let test_physics_world = "Test 14 - Physics World: " + (if test14_world_pass then "PASS" else "FAIL")
let test_physics_bodies = "Test 15 - Physics Bodies: " + (if test15_sphere_pass then "PASS" else "FAIL")
let test_physics_mass = "Test 16 - Physics Mass Query: " + (if test16_mass_pass then "PASS" else "FAIL")
let test_physics_shape = "Test 17 - Physics Shape Query: " + (if test17_shape_pass then "PASS" else "FAIL")
let test_physics_mass_set = "Test 18 - Physics Mass Setting: " + (if test18_mass_set_pass then "PASS" else "FAIL")
let test_physics_objects = "Test 19 - Physics Object List: " + (if test19_objects_pass then "PASS" else "FAIL")
let test_physics_info = "Test 20 - Physics Object Info: " + (if test20_info_pass then "PASS" else "FAIL")
let final_summary = "Tests Passed: " + passed_tests + " / " + total_tests
