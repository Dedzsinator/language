-- Advanced JIT compilation test
-- Test various function types and JIT compilation scenarios

-- Simple arithmetic functions suitable for JIT
let add_ints = (a: Int, b: Int) => a + b
let mul_floats = (x: Float, y: Float) => x * y
let compute_power = (base: Int, exp: Int) => base ^ exp

-- More complex functions
let factorial = (n: Int) => if n <= 1 then 1 else n * factorial(n - 1)

let fibonacci = (n: Int) => if n <= 1 then n else fibonacci(n - 1) + fibonacci(n - 2)

-- Test JIT-compiled function calls
let result1 = add_ints(5, 10)
let result2 = mul_floats(2.5, 4.0)
let result3 = compute_power(2, 8)
let result4 = factorial(5)
let result5 = fibonacci(10)

-- Return final result for output
let final_result = result1 + result2 + result3 + result4 + result5
