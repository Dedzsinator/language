-- Working Matrix Language Example
-- This demonstrates core language features

-- Basic data types
let number = 42
let pi = 3.14159
let greeting = "Hello Matrix Language"
let is_active = true

-- Functions with type annotations
let add = (a: Int, b: Int) => a + b
let multiply = (x: Float, y: Float) => x * y
let square = (x: Int) => x * x

-- Higher-order function
let apply_operation = (op: (Int, Int) -> Int, x: Int, y: Int) => op(x, y)

-- Data structures
struct Point2D {
    x: Float,
    y: Float
}

struct Circle {
    center: Point2D,
    radius: Float
}

-- Create instances
let origin = Point2D { x: 0.0, y: 0.0 }
let unit_circle = Circle {
    center: origin,
    radius: 1.0
}

-- Arrays and matrices
let numbers = [1, 2, 3, 4, 5]
let matrix2x2 = [[1, 2], [3, 4]]
let identity3x3 = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
]

-- Compute results
let sum_result = add(10, 20)
let product_result = multiply(3.5, 2.0)
let operation_result = apply_operation(add, 7, 8)
let square_result = square(8)
