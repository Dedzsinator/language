-- Math Functions Tests
-- Tests all mathematical functions available in Matrix Language

let run_math_tests = {
    let results = []

    -- Test 1: Absolute Value Functions
    let abs_neg = abs(-15)
    let abs_pos = abs(25)
    let abs_float = abs(-3.14)
    let abs_zero = abs(0)

    let result1a = assert_equal(15, abs_neg, "abs(-15)")
    let result1b = assert_equal(25, abs_pos, "abs(25)")
    let result1c = assert_equal(3.14, abs_float, "abs(-3.14)")
    let result1d = assert_equal(0, abs_zero, "abs(0)")
    let results = results + [result1a, result1b, result1c, result1d]

    -- Test 2: Square Root Functions
    let sqrt_16 = sqrt(16.0)
    let sqrt_9 = sqrt(9.0)
    let sqrt_1 = sqrt(1.0)
    let sqrt_4 = sqrt(4.0)

    let result2a = assert_equal(4.0, sqrt_16, "sqrt(16.0)")
    let result2b = assert_equal(3.0, sqrt_9, "sqrt(9.0)")
    let result2c = assert_equal(1.0, sqrt_1, "sqrt(1.0)")
    let result2d = assert_equal(2.0, sqrt_4, "sqrt(4.0)")
    let results = results + [result2a, result2b, result2c, result2d]

    -- Test 3: Trigonometric Functions
    let sin_0 = sin(0.0)
    let cos_0 = cos(0.0)
    let tan_0 = tan(0.0)
    let sin_pi_2 = sin(pi / 2.0)
    let cos_pi = cos(pi)

    let result3a = assert_equal(0.0, sin_0, "sin(0.0)")
    let result3b = assert_equal(1.0, cos_0, "cos(0.0)")
    let result3c = assert_equal(0.0, tan_0, "tan(0.0)")
    -- Note: We'll check approximate values for transcendental functions
    let results = results + [result3a, result3b, result3c]

    -- Test 4: Exponential and Logarithmic Functions
    let exp_0 = exp(0.0)
    let exp_1 = exp(1.0)
    let log_e = log(e)
    let log_1 = log(1.0)

    let result4a = assert_equal(1.0, exp_0, "exp(0.0)")
    let result4b = assert_equal(1.0, log_1, "log(1.0)")
    let results = results + [result4a, result4b]

    -- Test 5: Power Functions
    let pow_2_3 = pow(2.0, 3.0)
    let pow_5_2 = pow(5.0, 2.0)
    let pow_10_0 = pow(10.0, 0.0)
    let pow_3_1 = pow(3.0, 1.0)

    let result5a = assert_equal(8.0, pow_2_3, "pow(2.0, 3.0)")
    let result5b = assert_equal(25.0, pow_5_2, "pow(5.0, 2.0)")
    let result5c = assert_equal(1.0, pow_10_0, "pow(10.0, 0.0)")
    let result5d = assert_equal(3.0, pow_3_1, "pow(3.0, 1.0)")
    let results = results + [result5a, result5b, result5c, result5d]

    -- Test 6: Rounding Functions
    let floor_3_7 = floor(3.7)
    let floor_neg = floor(-2.3)
    let ceil_3_2 = ceil(3.2)
    let ceil_neg = ceil(-2.7)
    let round_3_6 = round(3.6)
    let round_3_4 = round(3.4)
    let round_3_5 = round(3.5)

    let result6a = assert_equal(3, floor_3_7, "floor(3.7)")
    let result6b = assert_equal(-3, floor_neg, "floor(-2.3)")
    let result6c = assert_equal(4, ceil_3_2, "ceil(3.2)")
    let result6d = assert_equal(-2, ceil_neg, "ceil(-2.7)")
    let result6e = assert_equal(4, round_3_6, "round(3.6)")
    let result6f = assert_equal(3, round_3_4, "round(3.4)")
    let result6g = assert_equal(4, round_3_5, "round(3.5)")
    let results = results + [result6a, result6b, result6c, result6d, result6e, result6f, result6g]

    -- Test 7: Min/Max Functions
    let min_10_25 = min(10, 25)
    let min_neg = min(-5, -10)
    let min_float = min(2.5, 7.1)
    let max_10_25 = max(10, 25)
    let max_neg = max(-5, -10)
    let max_float = max(2.5, 7.1)

    let result7a = assert_equal(10, min_10_25, "min(10, 25)")
    let result7b = assert_equal(-10, min_neg, "min(-5, -10)")
    let result7c = assert_equal(2.5, min_float, "min(2.5, 7.1)")
    let result7d = assert_equal(25, max_10_25, "max(10, 25)")
    let result7e = assert_equal(-5, max_neg, "max(-5, -10)")
    let result7f = assert_equal(7.1, max_float, "max(2.5, 7.1)")
    let results = results + [result7a, result7b, result7c, result7d, result7e, result7f]

    -- Test 8: Mathematical Constants
    let pi_test = pi
    let e_test = e
    let tau_test = tau

    -- We'll test that constants are reasonable values
    let pi_reasonable = (pi > 3.1) && (pi < 3.2)
    let e_reasonable = (e > 2.7) && (e < 2.8)
    let tau_reasonable = (tau > 6.2) && (tau < 6.3)

    let result8a = assert_equal(true, pi_reasonable, "pi constant reasonable")
    let result8b = assert_equal(true, e_reasonable, "e constant reasonable")
    let result8c = assert_equal(true, tau_reasonable, "tau constant reasonable")
    let results = results + [result8a, result8b, result8c]

    -- Count results
    let total_tests = len(results)
    let passed_tests = 0

    for result in results {
        if result.passed {
            let passed_tests = passed_tests + 1
        }
    }

    let suite = TestSuite {
        name: "Math Functions",
        results: results,
        total_tests: total_tests,
        passed_tests: passed_tests
    }

    suite
}
