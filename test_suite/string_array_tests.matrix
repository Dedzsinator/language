-- String and Array Tests
-- Tests string manipulation and array operations

let run_string_tests = {
    let results = []

    -- Test 1: String Creation and Basic Operations
    let str1 = "Hello"
    let str2 = "World"
    let str_concat = str1 + " " + str2

    let result1a = assert_equal("Hello", str1, "String literal assignment")
    let result1b = assert_equal("Hello World", str_concat, "String concatenation")
    let results = results + [result1a, result1b]

    -- Test 2: String Length
    let str_len = len("Matrix")
    let empty_len = len("")
    let space_len = len(" ")

    let result2a = assert_equal(6, str_len, "String length - Matrix")
    let result2b = assert_equal(0, empty_len, "Empty string length")
    let result2c = assert_equal(1, space_len, "Space string length")
    let results = results + [result2a, result2b, result2c]

    -- Test 3: String Conversion (str function)
    let int_to_str = str(42)
    let float_to_str = str(3.14)
    let bool_to_str = str(true)
    let false_to_str = str(false)

    let result3a = assert_equal("42", int_to_str, "Integer to string")
    let result3b = assert_equal("3.14", float_to_str, "Float to string")
    let result3c = assert_equal("true", bool_to_str, "Boolean true to string")
    let result3d = assert_equal("false", false_to_str, "Boolean false to string")
    let results = results + [result3a, result3b, result3c, result3d]

    -- Test 4: String with Numbers
    let num_str_concat = "Value: " + str(100)
    let mixed_concat = "Pi is approximately " + str(3.14159)

    let result4a = assert_equal("Value: 100", num_str_concat, "String + number concatenation")
    let result4b = assert_equal("Pi is approximately 3.14159", mixed_concat, "String + float concatenation")
    let results = results + [result4a, result4b]

    -- Count results
    let total_tests = len(results)
    let passed_tests = 0

    for result in results {
        if result.passed {
            let passed_tests = passed_tests + 1
        }
    }

    let suite = TestSuite {
        name: "String Operations",
        results: results,
        total_tests: total_tests,
        passed_tests: passed_tests
    }

    suite
}

let run_array_tests = {
    let results = []

    -- Test 1: Array Creation
    let int_array = [1, 2, 3, 4, 5]
    let float_array = [1.1, 2.2, 3.3]
    let string_array = ["hello", "world", "test"]
    let mixed_array = [1, "two", 3.0, true]
    let empty_array = []

    let result1a = assert_equal(5, len(int_array), "Integer array length")
    let result1b = assert_equal(3, len(float_array), "Float array length")
    let result1c = assert_equal(3, len(string_array), "String array length")
    let result1d = assert_equal(4, len(mixed_array), "Mixed array length")
    let result1e = assert_equal(0, len(empty_array), "Empty array length")
    let results = results + [result1a, result1b, result1c, result1d, result1e]

    -- Test 2: Array Access (if supported)
    let first_int = int_array[0]
    let second_float = float_array[1]
    let first_string = string_array[0]

    let result2a = assert_equal(1, first_int, "Array access - first integer")
    let result2b = assert_equal(2.2, second_float, "Array access - second float")
    let result2c = assert_equal("hello", first_string, "Array access - first string")
    let results = results + [result2a, result2b, result2c]

    -- Test 3: Array Concatenation
    let concat_arrays = [1, 2] + [3, 4]
    let concat_length = len(concat_arrays)

    let result3a = assert_equal(4, concat_length, "Array concatenation length")
    let results = results + [result3a]

    -- Test 4: Nested Arrays
    let nested = [[1, 2], [3, 4], [5, 6]]
    let nested_length = len(nested)

    let result4a = assert_equal(3, nested_length, "Nested array length")
    let results = results + [result4a]

    -- Count results
    let total_tests = len(results)
    let passed_tests = 0

    for result in results {
        if result.passed {
            let passed_tests = passed_tests + 1
        }
    }

    let suite = TestSuite {
        name: "Array Operations",
        results: results,
        total_tests: total_tests,
        passed_tests: passed_tests
    }

    suite
}
