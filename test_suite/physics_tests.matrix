-- Physics System Tests
-- Tests all physics simulation functionality

let run_physics_tests = {
    let results = []

    -- Test 1: Physics World Creation
    let world = create_physics_world()
    let world_created = world != null

    let result1 = assert_equal(true, world_created, "Physics world creation")
    let results = results + [result1]

    -- Test 2: Basic Rigid Body Creation - Cube
    let cube = add_rigid_body(
        world,
        shape: "cube",
        size: [1.0, 1.0, 1.0],
        mass: 1.0,
        position: [0.0, 5.0, 0.0]
    )
    let cube_created = cube != null

    let result2 = assert_equal(true, cube_created, "Cube rigid body creation")
    let results = results + [result2]

    -- Test 3: Sphere Creation
    let sphere = add_rigid_body(
        world,
        shape: "sphere",
        radius: 0.5,
        mass: 2.0,
        position: [1.0, 3.0, 0.0]
    )
    let sphere_created = sphere != null

    let result3 = assert_equal(true, sphere_created, "Sphere rigid body creation")
    let results = results + [result3]

    -- Test 4: Box Creation
    let box = add_rigid_body(
        world,
        shape: "box",
        size: [2.0, 0.1, 2.0],
        mass: 0.0,
        position: [0.0, 0.0, 0.0]
    )
    let box_created = box != null

    let result4 = assert_equal(true, box_created, "Box rigid body creation")
    let results = results + [result4]

    -- Test 5: Object Position Retrieval
    let cube_pos = get_object_position(world, cube)
    let pos_is_array = len(cube_pos) == 3

    let result5 = assert_equal(true, pos_is_array, "Object position retrieval")
    let results = results + [result5]

    -- Test 6: Object Mass Operations
    let original_mass = get_object_mass(world, cube)
    let mass_update = set_object_mass(world, cube, 2.5)
    let new_mass = get_object_mass(world, cube)

    let result6a = assert_equal(1.0, original_mass, "Get original object mass")
    let result6b = assert_equal(2.5, new_mass, "Set and get new object mass")
    let results = results + [result6a, result6b]

    -- Test 7: Object Info Retrieval
    let cube_info = get_object_info(world, cube)
    let info_has_mass = cube_info.mass != null
    let info_has_position = cube_info.position != null

    let result7a = assert_equal(true, info_has_mass, "Object info contains mass")
    let result7b = assert_equal(true, info_has_position, "Object info contains position")
    let results = results + [result7a, result7b]

    -- Test 8: Object Shape Retrieval
    let cube_shape = get_object_shape(world, cube)
    let sphere_shape = get_object_shape(world, sphere)

    let result8a = assert_equal("cube", cube_shape, "Cube shape retrieval")
    let result8b = assert_equal("sphere", sphere_shape, "Sphere shape retrieval")
    let results = results + [result8a, result8b]

    -- Test 9: List Objects
    let object_list = list_objects(world)
    let has_objects = len(object_list) >= 3

    let result9 = assert_equal(true, has_objects, "List objects in world")
    let results = results + [result9]

    -- Test 10: Physics Simulation Step
    let step_result = physics_step(world)
    let step_successful = step_result == null || step_result == true

    let result10 = assert_equal(true, step_successful, "Physics simulation step")
    let results = results + [result10]

    -- Test 11: Gravity Setting (if available)
    let gravity_set = set_gravity(world, [0.0, -9.81, 0.0])
    let gravity_successful = gravity_set == null || gravity_set == true

    let result11 = assert_equal(true, gravity_successful, "Set gravity")
    let results = results + [result11]

    -- Count results
    let total_tests = len(results)
    let passed_tests = 0

    for result in results {
        if result.passed {
            let passed_tests = passed_tests + 1
        }
    }

    let suite = TestSuite {
        name: "Physics System",
        results: results,
        total_tests: total_tests,
        passed_tests: passed_tests
    }

    suite
}
