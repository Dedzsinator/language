name: Nightly Tests

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  nightly-tests:
    name: Nightly Rust Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the workflow if nightly breaks
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-nightly-
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Check with nightly
        run: cargo +nightly check --all-targets --all-features

      - name: Test with nightly
        run: cargo +nightly test --all-targets --all-features

      - name: Clippy with nightly (allow warnings)
        run: cargo +nightly clippy --all-targets --all-features || echo "Nightly clippy completed with warnings"

      - name: Format check with nightly
        run: cargo +nightly fmt --all -- --check || echo "Nightly format check completed"

  experimental-features:
    name: Test Experimental Features
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Test with all unstable features
        run: |
          # Add unstable feature flags here as they become relevant
          cargo +nightly test --all-features || echo "Unstable features test completed"

  future-compatibility:
    name: Future Compatibility Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Check for future incompatibilities
        run: |
          cargo +nightly check --all-targets --all-features -Z future-incompat-report

      - name: Install cargo-careful
        run: cargo install cargo-careful

      - name: Run tests with extra checks
        run: cargo +nightly careful test || echo "Careful tests completed"

  miri:
    name: Miri (Undefined Behavior Detection)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain with miri
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Setup miri
        run: cargo miri setup

      - name: Run miri on unit tests
        run: |
          # Run only specific tests that don't require GUI
          cargo miri test lexer_comprehensive || echo "Miri lexer tests completed"
          cargo miri test parser_comprehensive || echo "Miri parser tests completed"
          cargo miri test physics_comprehensive || echo "Miri physics tests completed"

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Run tests with AddressSanitizer
        run: |
          export RUSTFLAGS="-Z sanitizer=address"
          export RUSTDOCFLAGS="-Z sanitizer=address"
          cargo +nightly test --target x86_64-unknown-linux-gnu || echo "AddressSanitizer tests completed"

      - name: Run tests with ThreadSanitizer
        run: |
          export RUSTFLAGS="-Z sanitizer=thread"
          export RUSTDOCFLAGS="-Z sanitizer=thread"
          cargo +nightly test --target x86_64-unknown-linux-gnu || echo "ThreadSanitizer tests completed"
