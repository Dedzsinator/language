name: Integration Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run integration tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  language-features:
    name: Language Feature Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Create test matrix files
        run: |
          mkdir -p test_files
          echo 'let x = 5 + 3' > test_files/simple_arithmetic.matrix
          echo 'let add = (a: Int, b: Int) -> Int => a + b' > test_files/function_def.matrix
          echo 'struct Point { x: Float, y: Float }' > test_files/struct_def.matrix
          echo 'let arr = [1, 2, 3, 4, 5]' > test_files/array_ops.matrix

      - name: Test lexer on sample files
        run: |
          for file in test_files/*.matrix; do
            echo "Testing lexer on $file"
            cargo run -- --tokenize "$file" || echo "Lexer test completed for $file"
          done

      - name: Test parser on sample files
        run: |
          for file in test_files/*.matrix; do
            echo "Testing parser on $file"
            cargo run -- --parse "$file" || echo "Parser test completed for $file"
          done

      - name: Test interpreter on sample files
        run: |
          for file in test_files/*.matrix; do
            echo "Testing interpreter on $file"
            timeout 10s cargo run -- "$file" || echo "Interpreter test completed for $file"
          done

  end-to-end:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build release binary
        run: cargo build --release

      - name: Test CLI interface
        run: |
          echo "Testing CLI help"
          ./target/release/matrix-lang --help || echo "Help test completed"
          
          echo "Testing CLI version"
          ./target/release/matrix-lang --version || echo "Version test completed"

      - name: Test REPL mode
        run: |
          echo "Testing REPL mode"
          echo -e "let x = 5\nlet y = x + 3\nexit" | timeout 10s ./target/release/matrix-lang --repl || echo "REPL test completed"

      - name: Test file execution
        run: |
          echo 'let result = 2 + 2' > test_program.matrix
          echo "Testing file execution"
          timeout 10s ./target/release/matrix-lang test_program.matrix || echo "File execution test completed"

  error-scenarios:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build debug binary
        run: cargo build

      - name: Test syntax error handling
        run: |
          echo 'let x = ' > syntax_error.matrix
          echo "Testing syntax error handling"
          ./target/debug/matrix-lang syntax_error.matrix 2>&1 | grep -i error || echo "Syntax error test completed"

      - name: Test runtime error handling
        run: |
          echo 'let x = 10 / 0' > runtime_error.matrix
          echo "Testing runtime error handling"
          ./target/debug/matrix-lang runtime_error.matrix 2>&1 | grep -i error || echo "Runtime error test completed"

      - name: Test file not found handling
        run: |
          echo "Testing file not found error"
          ./target/debug/matrix-lang nonexistent_file.matrix 2>&1 | grep -i "not found\|error" || echo "File not found test completed"

  physics-integration:
    name: Physics Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Run physics comprehensive tests
        run: cargo test physics_comprehensive --verbose

      - name: Run physics performance tests
        run: cargo test physics_performance --verbose

      - name: Test physics simulation scenarios
        run: |
          echo "Running physics simulation tests"
          cargo test test_physics_rigid_body_comprehensive --verbose
          cargo test test_physics_soft_body_creation --verbose
          cargo test test_physics_shape_inertia_tensors --verbose

  gui-integration:
    name: GUI Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev xvfb

      - name: Build with GUI features
        run: cargo build --all-features

      - name: Test GUI compilation
        run: |
          echo "Testing GUI module compilation"
          cargo check --all-features

      - name: Test headless GUI operations
        run: |
          echo "Testing headless GUI operations"
          # Use xvfb for headless testing if GUI components need display
          xvfb-run -a cargo test --all-features || echo "GUI tests completed"
